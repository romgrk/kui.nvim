type PackFn = (n: number) => number[];
type UnpackFn = (n: number[]) => number;
declare class ArrayBufferClass {
    byteLength: number;
    _bytes: number[];
    constructor(length: number);
}
export declare const Int8Array: {
    new (buffer: number | ArrayBufferClass | {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    }, byteOffset: number, length?: number): {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    };
    BYTES_PER_ELEMENT: number;
};
export declare const Uint8Array: {
    new (buffer: number | ArrayBufferClass | {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    }, byteOffset: number, length?: number): {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    };
    BYTES_PER_ELEMENT: number;
};
export declare const Uint8ClampedArray: {
    new (buffer: number | ArrayBufferClass | {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    }, byteOffset: number, length?: number): {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    };
    BYTES_PER_ELEMENT: number;
};
export declare const Int16Array: {
    new (buffer: number | ArrayBufferClass | {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    }, byteOffset: number, length?: number): {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    };
    BYTES_PER_ELEMENT: number;
};
export declare const Uint16Array: {
    new (buffer: number | ArrayBufferClass | {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    }, byteOffset: number, length?: number): {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    };
    BYTES_PER_ELEMENT: number;
};
export declare const Int32Array: {
    new (buffer: number | ArrayBufferClass | {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    }, byteOffset: number, length?: number): {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    };
    BYTES_PER_ELEMENT: number;
};
export declare const Uint32Array: {
    new (buffer: number | ArrayBufferClass | {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    }, byteOffset: number, length?: number): {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    };
    BYTES_PER_ELEMENT: number;
};
export declare const Float32Array: {
    new (buffer: number | ArrayBufferClass | {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    }, byteOffset: number, length?: number): {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    };
    BYTES_PER_ELEMENT: number;
};
export declare const Float64Array: {
    new (buffer: number | ArrayBufferClass | {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    }, byteOffset: number, length?: number): {
        [key: string]: any;
        [key: number]: any;
        [key: symbol]: any;
        length: number;
        BYTES_PER_ELEMENT: number;
        _pack: PackFn;
        _unpack: UnpackFn;
        __index(key: any): any;
        __newindex(key: any, value: number): number;
        _getter(index: number): number;
        get: (index: number) => number;
        _setter(index: number, value: number): void;
        set(index: number, value: number): void;
        subarray(start: number, end: number): any;
        fill(value: number): void;
        buffer: ArrayBufferClass;
        byteOffset: number;
        byteLength: number;
    };
    BYTES_PER_ELEMENT: number;
};
export {};
